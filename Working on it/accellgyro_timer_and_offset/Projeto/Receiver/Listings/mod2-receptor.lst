C51 COMPILER V9.55   MOD2_RECEPTOR                                                         11/13/2016 19:39:38 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE MOD2_RECEPTOR
OBJECT MODULE PLACED IN .\Objects\mod2-receptor.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE mod2-receptor.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\mod2-receptor.lst) TABS(2) OBJECT(.\Objects\mod2-receptor.obj)

line level    source

   1          /* Explicação:
   2            * pin P0.3 - TX
   3            * pin P0.4 - RX
   4            Receptor:
   5            Redireciona os dados lidos para uma porta serial.
   6            Pode enviar sinais para acender leds(verificando assim a comunica��o) ou requisitando leitura.
   7          
   8            Leitor Serial:
   9            Recebe o pacote
  10            [Start] [Size] [ADDR]
  11              [XAC_H] [XAC_L] [YAC_H] [YAC_L] [ZAC_H] [ZAC_L]
  12              [XGY_H] [XGY_L] [YGY_H] [YGY_L] [ZGY_H] [ZGY_L]
  13              [End]
  14            Interpreta atraves de Start, size e End, ent�o mostra as leituras
  15          */
  16          /***********************************************/
  17          
  18          #include "reg24le1.h" //Defini??es de muitos endere?os de registradores.
  19          #include "stdint.h" //inteiros uint8_t, int8_t, uint16_t....
  20          #include "stdbool.h" //Booleanos
  21          #include "API.h"
  22          #include "nRF-SPIComands.h"
  23          
  24          //Subendere?os usados no sistema
  25          #define RECEIVER_SUB_ADDR 0x02
  26          #define SENSOR_SUB_ADDR 0x01
  27          
  28          //Sinais utilizados na comunicacao via RF
  29          #define Sinal_request_data 0x0A
  30          #define Sinal_LEDS 0x0B
  31          #define SIGNAL_SENSOR_MSG 0x97
  32          
  33          //Flags para enviar no pct serial
  34          #define UART_START_FLAG 0x53
  35          #define UART_END_FLAG 0x04
  36          #define UART_PACKET_LENGHT 13
  37          #define UART_HEX_PRINT_FLAG 0x22
  38          
  39          //Defini��es dos bot�es e leds
  40          #define PIN32
  41          #ifdef  PIN32
  42          //Pushbuttons
  43          sbit S1  = P0^2;    // 1/0=no/press
  44          sbit S2  = P1^4;    // 1/0=no/press
  45          //LEDS
  46          sbit LEDVD = P0^6; // 1/0=light/dark
  47          #endif
  48          
  49          void uart_init(void);
  50          void uart_putchar(uint8_t x);
  51          void putstring(char *s);
  52          void delay_ms(unsigned int x);
  53          void luzes_iniciais(void);
  54          
C51 COMPILER V9.55   MOD2_RECEPTOR                                                         11/13/2016 19:39:38 PAGE 2   

  55          unsigned int ii;//contador
  56          
  57          void iniciarIO(void){
  58   1          //*************************** Init GPIO Pins
  59   1         P0DIR = 0xB7;   // 1011 0111 - 1/0 = In/Out - Output: P0.3 e P0.6 - Input: P0.4 e outros
  60   1         P1DIR = 0xFF;   // Tudo input
  61   1         P2DIR = 0xFF;
  62   1         P0CON = 0x00;    // All general I/O
  63   1         P1CON = 0x00;    // All general I/O
  64   1         P2CON = 0x00;    // All general I/O
  65   1      }
  66          void iniciarRF(void){
  67   1          // Radio + SPI setup
  68   1          RFCE = 0;       // Radio chip enable low
  69   1          RFCKEN = 1;     // Radio clk enable
  70   1          RF = 1;
  71   1          rf_init();
  72   1          RX_Mode();
  73   1      }
  74          void setup(void){
  75   1          iniciarIO();
  76   1          iniciarRF();
  77   1        uart_init();// Initializes the UART
  78   1        EA = 1; luzes_iniciais(); // Enable global interrupts
  79   1        putstring("receptor ligado\n");
  80   1      }
  81          void main(void){
  82   1        setup();
  83   1        while(1){
  84   2          if(!S1){
  85   3            //montando o pacote:
  86   3            tx_buf[0] = SENSOR_SUB_ADDR;
  87   3            tx_buf[1] = Sinal_request_data;
  88   3            //enviando e retornando ao padrao:
  89   3            TX_Mode_NOACK(2);
  90   3            RX_Mode();
  91   3            putstring("sinal request enviado\n");
  92   3            delay_ms(100); //evita ruidos
  93   3            while(!S1); //espera soltar o botao
  94   3            delay_ms(100);
  95   3          }
  96   2          if(!S2){
  97   3            //montando o pacote:
  98   3            tx_buf[0] = SENSOR_SUB_ADDR;
  99   3            tx_buf[1] = Sinal_LEDS;
 100   3            //enviando e retornando ao padrao:
 101   3            TX_Mode_NOACK(2);
 102   3            RX_Mode();
 103   3            putstring("sinal leds enviado\n");
 104   3            LEDVD = 0;
 105   3            delay_ms(100);
 106   3            while(!S2);//espera soltar o botao
 107   3            delay_ms(100);
 108   3          }
 109   2          if(newPayload){
 110   3            if(rx_buf[0] == SENSOR_SUB_ADDR && payloadWidth == UART_PACKET_LENGHT){
 111   4              //redireciona dados lidos do sensor
 112   4              uart_putchar(UART_START_FLAG);
 113   4              uart_putchar(UART_PACKET_LENGHT);
 114   4              for(ii=0;ii<UART_PACKET_LENGHT; ii++){
 115   5                uart_putchar(rx_buf[ii]);
 116   5              }
C51 COMPILER V9.55   MOD2_RECEPTOR                                                         11/13/2016 19:39:38 PAGE 3   

 117   4              uart_putchar(UART_END_FLAG);
 118   4            } else if(rx_buf[0] == SIGNAL_SENSOR_MSG){//sinal de texto sendo enviado
 119   4              for(ii=1; ii<payloadWidth; ii++){
 120   5                uart_putchar(rx_buf[ii]);
 121   5              }
 122   4              uart_putchar('\n');
 123   4            } else {//sinal de texto sendo enviado
 124   4              uart_putchar(UART_HEX_PRINT_FLAG);
 125   4              uart_putchar(payloadWidth);
 126   4              for(ii=0; ii<payloadWidth; ii++){
 127   5                uart_putchar(rx_buf[ii]);
 128   5              }
 129   4            }
 130   3            sta = 0;
 131   3            newPayload = 0;
 132   3          }
 133   2        }
 134   1      
 135   1      }
 136          /**************************************************/
 137          void uart_init(void){
 138   1          ES0 = 0;                      // Disable UART0 interrupt while initializing(1:??????????? INE0^4)
 139   1          REN0 = 1;                     // Enable receiver(1:??????????? S0CON^4)
 140   1          SM0 = 0;                      // Mode 1..  ??8???g? SM0 SM1??01??
 141   1          SM1 = 1;                      // ..8 bit variable baud rate
 142   1          PCON |= 0x80;                 // SMOD = 1(????0?????????)
 143   1          ADCON |= 0x80;                // Select internal baud rate generator
 144   1                        // (ADCON??????0??????????J?????'???????????????????? )
 145   1          S0RELL = 0xf3;                // baudrate 38400
 146   1          S0RELH = 0x03;
 147   1          TI0 = 0;            // S0CON^1:?????????????????????????
 148   1        S0BUF=0x00;           //????0????????J???
 149   1      }
 150          /**************************************************/
 151          void uart_putchar(uint8_t x){
 152   1        while (!TI0);
 153   1        TI0=0;
 154   1        S0BUF=x;
 155   1      }
 156          /*****************************/
 157          // Repeated putchar to print a string
 158          void putstring(char *s){
 159   1        while(*s != 0)
 160   1        uart_putchar(*s++);
 161   1      }
 162          /**************************************************/
 163          void luzes_iniciais(void){
 164   1              LEDVD = 1;
 165   1              delay_ms(1000);
 166   1              LEDVD = 0;
 167   1              delay_ms(1000);
 168   1              LEDVD = 1;
 169   1              delay_ms(1000);
 170   1              LEDVD = 0;
 171   1      }
 172          void delay_ms(unsigned int x){
 173   1          unsigned int i,j;
 174   1          i=0;
 175   1          for(i=0;i<x;i++)
 176   1          {
 177   2             j=508;
 178   2                 ;
C51 COMPILER V9.55   MOD2_RECEPTOR                                                         11/13/2016 19:39:38 PAGE 4   

 179   2             while(j--);
 180   2          }
 181   1      }
 182          /**************************************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    844    ----
   CONSTANT SIZE    =     60    ----
   XDATA SIZE       =     54    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

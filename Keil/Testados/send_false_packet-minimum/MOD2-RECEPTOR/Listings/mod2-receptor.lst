C51 COMPILER V9.56.0.0   MOD2_RECEPTOR                                                     10/03/2016 17:10:47 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MOD2_RECEPTOR
OBJECT MODULE PLACED IN .\Objects\mod2-receptor.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE mod2-receptor.c BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\mod2-receptor
                    -.lst) OBJECT(.\Objects\mod2-receptor.obj)

line level    source

   1          /*Código para comunicação UART entre o nrf24le1 e um arduino
   2          * pin P0.3 - TX
   3          * pin P0.4 - RX
   4          * please do not use P0.3 as LED or P0.4 as W2SCL
   5          * i dont know if P0.4 could work with 2 functions (RX and SCL)
   6          */
   7          
   8          #include "reg24le1.h" //Defini??es de muitos endere?os de registradores.
   9          #include "stdint.h" //inteiros uint8_t, int8_t, uint16_t....
  10          #include "stdbool.h" //Booleanos
  11          #include "API.h"
  12          #include "nRF-SPIComands.h"
  13          
  14          //Subendere?os usados no sistema
  15          #define MY_SUB_ADDR 0x02
  16          #define OTHER_SUB_ADDR 0x01
  17          // pacote a receber= [sub_endere?o_destinatario] QWH    QWL     QXH     QXL     QYH     QYL     QZH     QZL     AXH     AXL     AYH     AYL     AZH     AZL G
             -XH        GXL        GYH     GYL     GZH     GZL     MXH     MXL     MYH     MYL     MZH     MZL
  18          // pacote a enviar= [sub_endere?o_destinatario] [parar ou iniciar leituras]
  19          #define Sinal_request_data 0x0A
  20          #define Sinal_LEDS 0x0B
  21          
  22          //Definições dos botões e leds
  23          #define PIN32
  24          #ifdef  PIN32
  25          //Pushbuttons
  26          sbit S1  = P0^2;    // 1/0=no/press
  27          sbit S2  = P1^4;    // 1/0=no/press
  28          //LEDS
  29          sbit LEDVD = P0^6; // 1/0=light/dark
  30          #endif
  31          
  32          void uart_init(void);
  33          void uart_putchar(uint8_t x);
  34          void putstring(char *s);
  35          void delay_ms(unsigned int x);
  36          int i = 0;
  37          
  38          void luzes_iniciais(void){
  39   1              LEDVD = 1;
  40   1              delay_ms(1000);
  41   1              LEDVD = 0;
  42   1              delay_ms(1000);
  43   1              LEDVD = 1;
  44   1              delay_ms(1000);
  45   1              LEDVD = 0;
  46   1      }
  47          
  48          void setup(void){
  49   1               // Set up GPIO
  50   1          P0DIR = 0xB7;   // 1011 0111 - 1/0 = In/Out - Output: P0.3 e P0.6 - Input: P0.4 e outros
  51   1          P1DIR = 0xFF;   // Tudo input
  52   1          P2DIR = 0xFF;
  53   1          P0CON = 0x00;       // All general I/O
C51 COMPILER V9.56.0.0   MOD2_RECEPTOR                                                     10/03/2016 17:10:47 PAGE 2   

  54   1          P1CON = 0x00;       // All general I/O
  55   1          P2CON = 0x00;       // All general I/O
  56   1      
  57   1              // Radio + SPI setup
  58   1          RFCE = 0;       // Radio chip enable low
  59   1          RFCKEN = 1;     // Radio clk enable
  60   1          RF = 1;
  61   1              //inicia o rf
  62   1              rf_init();
  63   1              // Initializes the UART
  64   1              uart_init();
  65   1      
  66   1              // Enable global interrupts
  67   1              EA = 1;
  68   1              RX_Mode();
  69   1          luzes_iniciais();
  70   1              putstring("receptor ligado\n");
  71   1      }
  72          void main(void){
  73   1              setup();        
  74   1              while(1){
  75   2                      if(!S1){
  76   3                              //montando o pacote:
  77   3                              tx_buf[0] = OTHER_SUB_ADDR;
  78   3                              tx_buf[1] = Sinal_request_data;
  79   3                              //enviando e retornando ao padrao:
  80   3                              TX_Mode_NOACK(2);
  81   3                              RX_Mode();
  82   3                              //putstring("sinal request enviado\n");
  83   3                              delay_ms(100); //evita ruidos
  84   3                              while(!S1); //espera soltar o botao
  85   3                              delay_ms(100);
  86   3                      }
  87   2                      if(!S2){
  88   3                              //montando o pacote:
  89   3                              tx_buf[0] = OTHER_SUB_ADDR;
  90   3                              tx_buf[1] = Sinal_LEDS;
  91   3                              //enviando e retornando ao padrao:
  92   3                              TX_Mode_NOACK(2);
  93   3                              RX_Mode();
  94   3                              putstring("sinal LEDs enviado\n");
  95   3                              LEDVD = 0;
  96   3                              delay_ms(100);
  97   3                              while(!S2);//espera soltar o botao
  98   3                              delay_ms(100);
  99   3                      }
 100   2                      if(newPayload){
 101   3                              //verifica se o sinal ? para mim
 102   3                              if(rx_buf[0]== OTHER_SUB_ADDR){
 103   4                                    uart_putchar(OTHER_SUB_ADDR);
 104   4                                        for(i=1;i<7; i++){
 105   5                                              uart_putchar(rx_buf[i]);
 106   5                                        }
 107   4                                        uart_putchar('\n');
 108   4                              }
 109   3                              sta = 0;
 110   3                      newPayload = 0;
 111   3                      }
 112   2              }
 113   1              
 114   1      }
 115          /**************************************************/
C51 COMPILER V9.56.0.0   MOD2_RECEPTOR                                                     10/03/2016 17:10:47 PAGE 3   

 116          void uart_init(void)
 117          {
 118   1          ES0 = 0;                      // Disable UART0 interrupt while initializing(1:??????????? INE0^4)
 119   1          REN0 = 1;                     // Enable receiver(1:??????????? S0CON^4)
 120   1          SM0 = 0;                      // Mode 1..  ??8???g? SM0 SM1??01??
 121   1          SM1 = 1;                      // ..8 bit variable baud rate
 122   1          PCON |= 0x80;                 // SMOD = 1(????0?????????)
 123   1          ADCON |= 0x80;                // Select internal baud rate generator
 124   1                                                                        // (ADCON??????0??????????J?????'???????????????????? )
 125   1          S0RELL = 0xf3;                // baudrate 38400
 126   1          S0RELH = 0x03;
 127   1          TI0 = 0;                                      // S0CON^1:?????????????????????????
 128   1              S0BUF=0x00;                                       //????0????????J???
 129   1      }
 130          /**************************************************/
 131          void uart_putchar(uint8_t x)
 132          {
 133   1              while (!TI0);
 134   1              TI0=0;
 135   1              S0BUF=x;
 136   1      }
 137          /*****************************/
 138          // Repeated putchar to print a string
 139          void putstring(char *s)
 140          {
 141   1              while(*s != 0)
 142   1              uart_putchar(*s++);
 143   1      }
 144          /**************************************************/
 145          void delay_ms(unsigned int x)
 146          {
 147   1          unsigned int i,j;
 148   1          i=0;
 149   1          for(i=0;i<x;i++)
 150   1          {
 151   2             j=508;
 152   2                 ;
 153   2             while(j--);
 154   2          }
 155   1      }
 156          /**************************************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    726    ----
   CONSTANT SIZE    =     37    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     63      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
